generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  name   String @default("Не указано")
  avatar String @default("/uploads/no-user-avatar.png")

  stores    Store[]
  favorites Product[]
  reviews   Review[]
  orders    Order[]

  @@map("user")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  products   Product[]
  reviews    Review[]
  orderItems OrderItem[]

  @@map("store")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Int
  images      String[]
  specs       Json?

  reviews    Review[]
  colors     Color[]     @relation("product_colors")
  orderItems OrderItem[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?      @map("subcategory_id")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("product")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  subcategories Subcategory[]

  @@map("category")
}

model Subcategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  products Product[]

  @@map("subcategory")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String @unique
  value String

  products Product[] @relation("product_colors")

  @@map("color")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("review")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
